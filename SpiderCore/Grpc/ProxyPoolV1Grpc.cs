// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProxyPoolV1.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ProxyPool.Grpc {
  public static partial class ProxyPoolV1
  {
    static readonly string __ServiceName = "ProxyPool.Grpc.ProxyPoolV1";

    static readonly grpc::Marshaller<global::ProxyPool.Grpc.Text> __Marshaller_Text = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ProxyPool.Grpc.Text.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ProxyPool.Grpc.Proxy> __Marshaller_Proxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ProxyPool.Grpc.Proxy.Parser.ParseFrom);

    static readonly grpc::Method<global::ProxyPool.Grpc.Text, global::ProxyPool.Grpc.Proxy> __Method_GetById = new grpc::Method<global::ProxyPool.Grpc.Text, global::ProxyPool.Grpc.Proxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_Text,
        __Marshaller_Proxy);

    static readonly grpc::Method<global::ProxyPool.Grpc.Proxy, global::ProxyPool.Grpc.Proxy> __Method_Get = new grpc::Method<global::ProxyPool.Grpc.Proxy, global::ProxyPool.Grpc.Proxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_Proxy,
        __Marshaller_Proxy);

    static readonly grpc::Method<global::ProxyPool.Grpc.Proxy, global::ProxyPool.Grpc.Proxy> __Method_Create = new grpc::Method<global::ProxyPool.Grpc.Proxy, global::ProxyPool.Grpc.Proxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Proxy,
        __Marshaller_Proxy);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ProxyPool.Grpc.ProxyPoolV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProxyPoolV1</summary>
    public abstract partial class ProxyPoolV1Base
    {
      public virtual global::System.Threading.Tasks.Task<global::ProxyPool.Grpc.Proxy> GetById(global::ProxyPool.Grpc.Text request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ProxyPool.Grpc.Proxy> Get(global::ProxyPool.Grpc.Proxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ProxyPool.Grpc.Proxy> Create(global::ProxyPool.Grpc.Proxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProxyPoolV1</summary>
    public partial class ProxyPoolV1Client : grpc::ClientBase<ProxyPoolV1Client>
    {
      /// <summary>Creates a new client for ProxyPoolV1</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProxyPoolV1Client(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProxyPoolV1 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProxyPoolV1Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProxyPoolV1Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProxyPoolV1Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ProxyPool.Grpc.Proxy GetById(global::ProxyPool.Grpc.Text request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ProxyPool.Grpc.Proxy GetById(global::ProxyPool.Grpc.Text request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ProxyPool.Grpc.Proxy> GetByIdAsync(global::ProxyPool.Grpc.Text request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ProxyPool.Grpc.Proxy> GetByIdAsync(global::ProxyPool.Grpc.Text request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual global::ProxyPool.Grpc.Proxy Get(global::ProxyPool.Grpc.Proxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ProxyPool.Grpc.Proxy Get(global::ProxyPool.Grpc.Proxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ProxyPool.Grpc.Proxy> GetAsync(global::ProxyPool.Grpc.Proxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ProxyPool.Grpc.Proxy> GetAsync(global::ProxyPool.Grpc.Proxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      public virtual global::ProxyPool.Grpc.Proxy Create(global::ProxyPool.Grpc.Proxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ProxyPool.Grpc.Proxy Create(global::ProxyPool.Grpc.Proxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ProxyPool.Grpc.Proxy> CreateAsync(global::ProxyPool.Grpc.Proxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ProxyPool.Grpc.Proxy> CreateAsync(global::ProxyPool.Grpc.Proxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProxyPoolV1Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProxyPoolV1Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProxyPoolV1Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetById, serviceImpl.GetById)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Create, serviceImpl.Create).Build();
    }

  }
}
#endregion
